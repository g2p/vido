#!/usr/bin/python3 -S
import argparse
import ctypes
import errno
import json
import os
import pwd
import shutil
import subprocess
import sys
import tempfile
import types
import urllib.parse


def path_resolve(cmd):
    cmd0 = cmd

    if '/' not in cmd:
        cmd = shutil.which(cmd)
        assert cmd, cmd0

    cmd = os.path.abspath(cmd)
    assert os.path.exists(cmd), cmd0
    return cmd


def fatal(msg):
    print(msg, file=sys.stderr)
    sys.exit(2)


try:
    assert False
except AssertionError:
    pass
else:
    fatal('Assertions must be enabled')

script = path_resolve(sys.argv[0])

assert script.endswith('/vido')
runner = os.path.dirname(script) + '/virt-stub'
assert os.path.exists(runner)


def kopt_safe(st):
    # The kernel cmdline doesn't support any kind of quoting
    # Mustn't contain any whitespace (see string.whitespace, ' \t\n\r\v\f')
    return len(st.split()) == 1

assert kopt_safe(runner)

# We only really need to quote whitespace and escape unicode
# maybe str.replace would suffice
KCMD_SAFE = ":/?#[]@" + "!$&'()*+,;=" + "{}\"\\"
assert kopt_safe(KCMD_SAFE)
conf = types.SimpleNamespace()


def mkinitramfs(irf, rootflags, runner, modbase):
    mods = []
    builtin_mods = set(
        li.rstrip() for li in open(modbase + 'modules.builtin').readlines())
    def add_mod(path):
        base = os.path.basename(path)
        if os.path.exists(modbase + path):
            shutil.copyfile(modbase + path, tdir + base)
            mods.append(base)
        elif os.path.exists(modbase + path + '.gz'):
            with open(tdir + base, 'xb') as out:
                with gzip.open(modbase + path + '.gz') as fin:
                    shutil.copyfileobj(fin, out)
        elif path in builtin_mods:
            pass
        else:
            fatal('Module {} not found and not built-in'.format(path))
    with tempfile.TemporaryDirectory(suffix='.initramfs') as tdir:
        tdir += '/'
        add_mod('kernel/drivers/virtio/virtio_ring.ko')
        add_mod('kernel/drivers/virtio/virtio.ko')
        add_mod('kernel/drivers/virtio/virtio_pci.ko')
        add_mod('kernel/net/9p/9pnet.ko')
        add_mod('kernel/net/9p/9pnet_virtio.ko')
        add_mod('kernel/fs/fscache/fscache.ko')
        add_mod('kernel/fs/9p/9p.ko')
        add_mod('kernel/drivers/net/virtio_net.ko')
        add_mod('kernel/fs/overlayfs/overlay.ko')
        with open(tdir + '/init', 'x') as initf:
            initf.write('''#!/busybox sh
                        /busybox mkdir /bin
                        /busybox --install /bin
                        {insmod}
                        mount -n -o {rootflags} -t 9p /dev/root /root
                        exec switch_root /root {runner} "$@"
                        '''.format(rootflags=rootflags, runner=runner,
                                  insmod='\n'.join(
                                      'insmod /' + mod for mod in mods)))
            os.chmod(initf.fileno(), int('555', 8))

        # static
        try:
            shutil.copy('/bin/busybox', tdir)
        except FileNotFoundError:
            shutil.copy('/usr/sbin/busybox', tdir)

        with subprocess.Popen(
            'cpio --quiet -o -H newc'.split(),
            stdin=subprocess.PIPE, stdout=irf, cwd=tdir
        ) as proc:
            proc.stdin.write(
                '\n'.join('busybox init'.split() + mods).encode())
        assert proc.returncode == 0


def drop_privs(user):
    # https://www.securecoding.cert.org/confluence/display/seccode/POS36-C.+Observe+correct+revocation+order+while+relinquishing+privileges
    # https://www.securecoding.cert.org/confluence/display/seccode/POS37-C.+Ensure+that+privilege+relinquishment+is+successful
    pw = pwd.getpwnam(user)
    os.setgroups([])
    os.setgid(pw.pw_gid)
    os.setuid(pw.pw_uid)

    # See CERT above, and Qemu does it too
    # AIUI this is useful with ancient kernels
    # or when starting with mixed credentials
    try:
        os.setuid(0)
    except PermissionError:
        pass
    else:
        raise RuntimeError('Failed to drop privileges')


def quote_config(conf):
    return urllib.parse.quote(
        json.dumps(vars(conf), separators=(',', ':')), safe=KCMD_SAFE)

# HOME and TERM seem to be set by the kernel (as well as root and the kernel
# cmdline), the rest would be set by a shell
ALWAYS_PASS_ENV = 'HOME TERM PATH SHELL'.split()

parser = argparse.ArgumentParser()
sp_virt = parser.add_argument_group('Choice of virtualisation')
sp_virt.add_argument(
    '--uml', action='store_const', dest='virt', const='uml',
    help='Run a UML kernel (current default)')
sp_virt.add_argument(
    '--kvm', action='store_const', dest='virt', const='kvm',
    help='Run a standard kernel with QEMU and KVM')
sp_virt.add_argument(
    '--userns', action='store_const', dest='virt', const='userns',
    help='Don\'t enter a new kernel, just a new user namespace'
    ' (needs CONFIG_USER_NS)')
sp_virt.set_defaults(virt='uml')

# no virt-specific handling required
sp_common = parser.add_argument_group('Common options')
sp_common.add_argument(
    '--pass-env', dest='pass_env',
    nargs='+', default=[], metavar='NAME',
    help='Environment variables to preserve')
sp_common.add_argument(
    '--clear-files', dest='clear_files', default=[], nargs='+', metavar='FILE',
    help='Files that will become empty and writable')
sp_common.add_argument(
    '--clear-dirs', dest='clear_dirs', default=[], nargs='+', metavar='DIR',
    help='Directories that will become empty and writable')
sp_common.add_argument(
    '--rw-dirs', dest='rw_dirs', default=[], nargs='+', metavar='DIR',
    help='Directories that will pass reads through and redirect writes'
    ' to a temporary overlay')
sp_common.add_argument(
    '--allow-sudo', dest='allow_sudo', action='store_true',
    help='Enable permissive sudo')

# need kernel virt
sp_kernel = parser.add_argument_group('Kernel options')
sp_kernel.add_argument(
    '--kernel', metavar='KERNEL', help='Kernel executable')
sp_kernel.add_argument(
    '--kernel-version', metavar='VERSION', help='Installed kernel version')
sp_kernel.add_argument(
    '--mem', help='Memory limit (use KMG suffixes)')
sp_kernel.add_argument(
    '--gdb', action='store_true', help='Run the kernel in a debugger')
sp_kernel.add_argument(
    '--kopts', dest='kopts', default=[], nargs='+', metavar='KOPT',
    help='Append to the kernel command line')
sp_kernel.add_argument(
    '--disks', dest='disks', default=[], nargs='+', metavar='DISK',
    help='Expose block devices and disk images through'
    ' $VIDO_DISK0 onwards')
sp_kernel.add_argument(
    '--run-as', dest='run_as',
    help='Drop user privileges before entering the kernel'
    ' (sudo vido --run-as $USER is useful to open block devices)')

# need kvm
sp_kvm = parser.add_argument_group('KVM-only options')
# slirp is unmaintained outside of qemu
sp_kvm.add_argument(
    '--net', action='store_true',
    help='Configure the network (unnecessary with userns)')
# qemu needs this to catch crashes (unnecessary with uml)
sp_kvm.add_argument(
    '--watchdog', action='store_true',
    help='Catch crashes with a watchdog timer')
sp_kvm.add_argument(
    '--qemu-runner', help='Choose a custom qemu-system-* command')
sp_kvm.add_argument(
    '--qemu-9p-workaround', action='store_true',
    help='Work around a bug with the 9p server in Qemu < 1.6')

sp_cmd = parser.add_argument_group(
    'Command', 'Use two dashes (--) to separate the command'
    ' from prior flags')
sp_cmd.add_argument(
    'cmd', nargs='*', metavar='CMD',
    help='Command and arguments to run; defaults to a shell')

args = parser.parse_args()

maybe_pass_env = args.pass_env + ['PWD']
pass_env = ALWAYS_PASS_ENV + [
    var for var in maybe_pass_env if var in os.environ]

cmd = args.cmd or [os.environ['SHELL']]
cmd[0] = path_resolve(cmd[0])

kcmd = ['rw', 'quiet', 'init=' + runner]

conf.env = {var: os.environ[var] for var in pass_env}
conf.cmd = cmd
conf.cwd = os.getcwd()
conf.allow_sudo = args.allow_sudo

for dn in args.rw_dirs:
    assert os.path.exists(dn), dn
conf.rw_dirs = args.rw_dirs
if '/' in conf.rw_dirs:
    conf.rw_dirs.remove('/')
    conf.pivot_root = True
else:
    conf.pivot_root = False

for dn in args.clear_files:
    assert os.path.exists(dn), dn
conf.clear_files = args.clear_files

for dn in args.clear_dirs:
    assert os.path.exists(dn), dn
conf.clear_dirs = args.clear_dirs

assert all(map(kopt_safe, args.kopts))
kcmd.extend(args.kopts)


def pass_disks(conf, disk_prefix):
    assert len(args.disks) <= 26
    conf.disks = [
        '/dev/' + disk_prefix + chr(ord('a') + i)
        for i in range(len(args.disks))]


if args.qemu_runner and args.virt != 'kvm':
    fatal('--qemu-runner is not supported with {}'.format(args.virt))
if args.watchdog and args.virt != 'kvm':
    fatal('--watchdog is not supported with {}'.format(args.virt))
if args.qemu_9p_workaround and args.virt != 'kvm':
    fatal('--qemu-9p-workaround is not supported with {}'.format(args.virt))
if args.net and args.virt != 'kvm':
    fatal('--net is not supported with {}'.format(args.virt))
if args.run_as and args.virt not in 'kvm uml'.split():
    fatal('--run-as is not supported with {}'.format(args.virt))
if args.gdb and args.virt not in 'kvm uml'.split():
    fatal('--gdb is not supported with {}'.format(args.virt))
if args.kopts and args.virt not in 'kvm uml'.split():
    fatal('--kopts is not supported with {}'.format(args.virt))
if args.disks and args.virt not in 'kvm uml'.split():
    fatal('--disks is not supported with {}'.format(args.virt))
if args.mem is not None:
    if args.virt not in 'kvm uml'.split():
        fatal('--mem is not supported with {}'.format(args.virt))
else:
    args.mem = '128M'
if args.kernel and args.virt not in 'kvm uml'.split():
    fatal('--kernel is not supported with {}'.format(args.virt))

for dname in args.disks:
    if not os.path.exists(dname):
        fatal('Disk {!r} doesn\'t exist'.format(dname))

conf.watchdog = args.watchdog

# Kept for GC purposes
ipc_dir = None
def open_ipc():
    global ipc_dir
    ipc_dir = tempfile.TemporaryDirectory(prefix='vido-', suffix='.ipc')
    conf.ipc = ipc_dir.name

conf.virt = args.virt

if args.virt == 'kvm':
    if args.qemu_runner is None:
        qemu = 'qemu-system-' + os.uname().machine
    else:
        qemu = args.qemu_runner

    qcmd = [
        qemu,
        '-cpu', 'host',
        '-m', args.mem, '-enable-kvm', '-nodefaults',
        '-serial', 'stdio', '-nographic',
        '-fsdev', 'local,id=root,path=/,security_model=none',
        '-device', 'virtio-9p-pci,fsdev=root,mount_tag=/dev/root']

    pass_fds = []
    for disk in args.disks:
        # O_EXCL on a block device does mandatory locking
        # against kernel mounts (as well as advisory locking
        # against other vido instances)
        fd = os.open(disk, os.O_RDWR|os.O_EXCL)
        pass_fds.append(fd)
        qcmd += [
            '-add-fd', 'fd={},set={}'.format(fd, fd),
            '-drive', 'file=/dev/fdset/{},if=virtio,media=disk'.format(fd)]
    pass_disks(conf, 'vd')

    if args.run_as:
        #qcmd += ['-runas', args.run_as]
        drop_privs(args.run_as)
    open_ipc()

    if args.kernel is None:
        if args.kernel_version:
            kernel_ver = args.kernel_version
        else:
            kernel_ver = os.uname().release

        # Those may not work out of the box, need 9p+virtio built-in
        # Building a custom initramfs would work around that
        qcmd += ['-kernel', '/boot/vmlinuz-' + kernel_ver]
        add_9p_mods = True
        modbase = '/lib/modules/' + kernel_ver + '/'
    else:
        qcmd += ['-kernel', args.kernel]
        add_9p_mods = False

    if args.net:
        # Can't get virtio to work (btw, I get a sit0 not eth0)
        #qcmd += ['-netdev', 'user', '-net', 'nic,model=virtio']
        qcmd += ['-net', 'user,net=10.0.2.0/24,host=10.0.2.2,dns=10.0.2.3',
                 '-net', 'nic,model=virtio']
        # Not passing dns, sharing the host's resolv.conf
        # Suggest a port-forward for the local resolver case
        conf.net = dict(host='10.0.2.15/24', router='10.0.2.2')

    if args.watchdog:
        qcmd += ['-watchdog', 'ib700', '-watchdog-action', 'poweroff']
        # Shutdown within a second
        kcmd += ['ib700wdt.timeout=1', 'ib700wdt.nowayout=1']

    if args.gdb:
        qcmd += ['-s']
        # We can't use the -S flag to wait for gdb, any breakpoints set
        # at early startup would be unusable:
        # http://thread.gmane.org/gmane.comp.emulators.qemu/80327
        print('Please run: gdb -ex "target remote :1234" ./vmlinux')

    rootflags = 'trans=virtio,cache=fscache'
    if args.qemu_9p_workaround:
        rootflags += ',version=9p2000.u'

    kcmd += ['rootfstype=9p', 'rootflags=' + rootflags, 'console=ttyS0']

    kcmd.append('VIDO_CONFIG=' + quote_config(conf))
    qcmd += ['-append', ' '.join(kcmd)]
    if add_9p_mods:
        with tempfile.NamedTemporaryFile(suffix='.initramfs') as irf:
            mkinitramfs(irf, rootflags=rootflags, runner=runner, modbase=modbase)
            qcmd += ['-initrd', irf.name]
            subprocess.check_call(qcmd, pass_fds=pass_fds)
    else:
        subprocess.check_call(qcmd, pass_fds=pass_fds)
elif args.virt == 'uml':
    if args.kernel is None:
        args.kernel = '/usr/bin/linux.uml'
    ucmd = [args.kernel]

    pass_fds = []
    for pos, disk in enumerate(args.disks):
        # O_EXCL: see above
        fd = os.open(disk, os.O_RDWR|os.O_EXCL)
        pass_fds.append(fd)
        kcmd.append('ubd{}=/dev/fd/{}'.format(pos, fd))
    pass_disks(conf, 'ubd')
    if args.run_as:
        drop_privs(args.run_as)
    open_ipc()

    kcmd += ['rootfstype=hostfs', 'mem=' + args.mem]
    kcmd.append('VIDO_CONFIG=' + quote_config(conf))
    if args.gdb:
        subprocess.check_call([
            'gdb',
            '-ex', 'handle SIGSEGV pass nostop noprint',
            '-ex', 'handle SIGUSR1 nopass stop print',
            '--args'] + ucmd + kcmd, pass_fds=pass_fds)
    else:
        out2 = os.dup(1)
        kcmd.append('con0=fd:0,fd:{}'.format(out2))
        subprocess.check_call(
            ucmd + kcmd, pass_fds=[out2] + pass_fds,
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
elif args.virt == 'userns':
    open_ipc()
    conf.disks = []
    def do_unshare():
        libc = ctypes.CDLL('libc.so.6', use_errno=True)
        CLONE_NEWUSER = 0x10000000
        CLONE_NEWNS = 0x00020000
        orig_uid = os.getuid()
        orig_gid = os.getgid()
        if libc.unshare(CLONE_NEWUSER | CLONE_NEWNS) != 0:
            eno = ctypes.get_errno()
            if eno == errno.EINVAL:
                fatal('unshare: EINVAL. '
                      'Make sure your kernel has CONFIG_USER_NS.')
            raise OSError(eno)
        try:
            with open('/proc/self/setgroups', 'w') as mf:
                mf.write('deny\n')
        except FileNotFoundError:
            can_setgroups = True
        else:
            can_setgroups = False
        with open('/proc/self/uid_map', 'w') as mf:
            mf.write('0 {} 1\n'.format(orig_uid))
        with open('/proc/self/gid_map', 'w') as mf:
            mf.write('0 {} 1\n'.format(orig_gid))
        os.setuid(0)
        os.setgid(0)
        if can_setgroups:
            os.setgroups([])
    subprocess.check_call(
        [runner], env=dict(VIDO_CONFIG=quote_config(conf)),
        preexec_fn=do_unshare)
else:
    assert False, args.virt

try:
    exitf = open(conf.ipc + '/exit-status')
except FileNotFoundError:
    fatal('VM crash')
else:
    with exitf:
        exitstr = exitf.read()
        if not exitstr:
            fatal('virt-stub crashed')
        sys.exit(int(exitstr))

